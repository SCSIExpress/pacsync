apiVersion: apps/v1
kind: Deployment
metadata:
  name: pacman-sync-utility
  labels:
    app: pacman-sync-utility
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: pacman-sync-utility
  template:
    metadata:
      labels:
        app: pacman-sync-utility
        version: v1.0.0
    spec:
      containers:
      - name: pacman-sync-utility
        image: pacman-sync-utility:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: DATABASE_TYPE
          value: "postgresql"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: pacman-sync-db-secret
              key: database-url
        - name: HTTP_PORT
          value: "8080"
        - name: HTTP_HOST
          value: "0.0.0.0"
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENVIRONMENT
          value: "production"
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: pacman-sync-secret
              key: jwt-secret
        - name: DB_POOL_MIN_SIZE
          value: "2"
        - name: DB_POOL_MAX_SIZE
          value: "20"
        - name: STRUCTURED_LOGGING
          value: "true"
        
        # Resource limits for horizontal scaling
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Liveness probe - checks if the container is alive
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        # Readiness probe - checks if the container is ready to serve traffic
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe - gives the container time to start up
        startupProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12  # 60 seconds total
          successThreshold: 1
        
        # Graceful shutdown configuration
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
        
        # Volume mounts for persistent data
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        - name: config-volume
          mountPath: /app/config
      
      # Graceful shutdown configuration
      terminationGracePeriodSeconds: 45
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: pacman-sync-data-pvc
      - name: logs-volume
        emptyDir: {}
      - name: config-volume
        configMap:
          name: pacman-sync-config

---
apiVersion: v1
kind: Service
metadata:
  name: pacman-sync-utility-service
  labels:
    app: pacman-sync-utility
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: pacman-sync-utility

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pacman-sync-config
data:
  # Application configuration can be added here
  app.conf: |
    # Pacman Sync Utility Configuration
    # Add any additional configuration here

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pacman-sync-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
# Horizontal Pod Autoscaler for automatic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pacman-sync-utility-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pacman-sync-utility
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max