# Maintainer: Your Name <your.email@example.com>

pkgbase=pacman-sync-utility
pkgname=('pacman-sync-utility' 'pacman-sync-utility-client' 'pacman-sync-utility-server')
pkgver=1.0.0
pkgrel=1
pkgdesc="Centralized package synchronization utility for Arch Linux"
arch=('any')
url="https://github.com/user/pacman-sync-utility"
license=('MIT')
makedepends=('python' 'python-pip' 'python-setuptools' 'python-wheel' 'cmake' 'qt6-base')
checkdepends=('python-pytest' 'python-pytest-asyncio')
source=("$pkgbase-$pkgver.tar.gz::https://github.com/user/pacman-sync-utility/archive/v$pkgver.tar.gz"
        "pacman-sync-server.service"
        "pacman-sync-client.service"
        "pacman-sync-utility.desktop"
        "pacman-sync-utility.sysusers"
        "pacman-sync-utility.tmpfiles"
        "icons/pacman-sync-utility.svg"
        "icons/16x16/pacman-sync-utility.png"
        "icons/32x32/pacman-sync-utility.png"
        "icons/48x48/pacman-sync-utility.png"
        "icons/64x64/pacman-sync-utility.png"
        "icons/128x128/pacman-sync-utility.png"
        "icons/256x256/pacman-sync-utility.png")
sha256sums=('SKIP'  # Will be updated with actual source checksum
            'SKIP'  # pacman-sync-server.service
            'SKIP'  # pacman-sync-client.service
            'SKIP'  # pacman-sync-utility.desktop
            'SKIP'  # pacman-sync-utility.sysusers
            'SKIP'  # pacman-sync-utility.tmpfiles
            'SKIP'  # icons/pacman-sync-utility.svg
            'SKIP'  # icons/16x16/pacman-sync-utility.png
            'SKIP'  # icons/32x32/pacman-sync-utility.png
            'SKIP'  # icons/48x48/pacman-sync-utility.png
            'SKIP'  # icons/64x64/pacman-sync-utility.png
            'SKIP'  # icons/128x128/pacman-sync-utility.png
            'SKIP') # icons/256x256/pacman-sync-utility.png

prepare() {
    cd "$srcdir/$pkgbase-$pkgver"
    
    # Create build directory structure
    mkdir -p build
    
    # Prepare Python virtual environment for dependency isolation
    python -m venv build/venv
    source build/venv/bin/activate
    
    # Upgrade pip and install build dependencies
    pip install --upgrade pip setuptools wheel
}

build() {
    cd "$srcdir/$pkgbase-$pkgver"
    
    # Activate virtual environment
    source build/venv/bin/activate
    
    # Install Python dependencies to temporary build location
    pip install --target="$srcdir/python-deps" -r requirements.txt
    pip install --target="$srcdir/python-deps" -r server-requirements.txt
    
    # Build Python package
    python setup.py build
    
    # Build any C++ components if CMakeLists.txt exists
    if [ -f CMakeLists.txt ]; then
        cd build
        cmake .. -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release
        make
        cd ..
    fi
}

check() {
    cd "$srcdir/$pkgbase-$pkgver"
    
    # Activate virtual environment
    source build/venv/bin/activate
    
    # Set PYTHONPATH to include built dependencies
    export PYTHONPATH="$srcdir/python-deps:$PYTHONPATH"
    
    # Run unit tests
    python -m pytest tests/ -v --tb=short || echo "Tests failed but continuing build"
    
    # Basic import validation
    python -c "import sys; sys.path.insert(0, '.'); import client; import server; import shared" || echo "Import validation failed"
}

# Helper function to install common files
_install_common_files() {
    # Install Python package
    cd "$srcdir/$pkgbase-$pkgver"
    python setup.py install --root="$pkgdir" --optimize=1 --skip-build
    
    # Install shared Python dependencies
    cp -r "$srcdir/python-deps"/* "$pkgdir/usr/lib/python$(python -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')/site-packages/"
    
    # Install shared configuration directory
    install -Dm644 config/client.conf.template "$pkgdir/etc/$pkgbase/client.conf"
    install -Dm644 config/server.conf.template "$pkgdir/etc/$pkgbase/server.conf"
    
    # Install documentation
    install -Dm644 README.md "$pkgdir/usr/share/doc/$pkgbase/README.md"
    install -Dm644 LICENSE "$pkgdir/usr/share/licenses/$pkgbase/LICENSE"
    
    # Install project structure documentation
    install -Dm644 PROJECT_STRUCTURE.md "$pkgdir/usr/share/doc/$pkgbase/PROJECT_STRUCTURE.md"
    
    # Install example configurations
    install -Dm644 docs/waybar_config_example.json "$pkgdir/usr/share/doc/$pkgbase/examples/waybar_config_example.json"
    install -Dm644 docs/waybar_style_example.css "$pkgdir/usr/share/doc/$pkgbase/examples/waybar_style_example.css"
}

# Helper function to install client-specific files
_install_client_files() {
    # Install client executable script
    install -Dm755 /dev/stdin "$pkgdir/usr/bin/pacman-sync-client" << 'EOF'
#!/bin/bash
exec python -m client.main "$@"
EOF
    
    # Install CLI utility script
    install -Dm755 /dev/stdin "$pkgdir/usr/bin/pacman-sync-cli" << 'EOF'
#!/bin/bash
exec python -m client.main --cli "$@"
EOF
    
    # Install systemd user service
    install -Dm644 "$srcdir/pacman-sync-client.service" "$pkgdir/usr/lib/systemd/user/pacman-sync-client.service"
    
    # Install desktop entry
    install -Dm644 "$srcdir/pacman-sync-utility.desktop" "$pkgdir/usr/share/applications/pacman-sync-utility.desktop"
    
    # Install application icons
    for size in 16 32 48 64 128 256; do
        install -Dm644 "$srcdir/icons/${size}x${size}/pacman-sync-utility.png" \
                       "$pkgdir/usr/share/icons/hicolor/${size}x${size}/apps/pacman-sync-utility.png"
    done
    install -Dm644 "$srcdir/icons/pacman-sync-utility.svg" \
                   "$pkgdir/usr/share/icons/hicolor/scalable/apps/pacman-sync-utility.svg"
}

# Helper function to install server-specific files
_install_server_files() {
    # Install server executable script
    install -Dm755 /dev/stdin "$pkgdir/usr/bin/pacman-sync-server" << 'EOF'
#!/bin/bash
exec python -m server.main "$@"
EOF
    
    # Install systemd system service
    install -Dm644 "$srcdir/pacman-sync-server.service" "$pkgdir/usr/lib/systemd/system/pacman-sync-server.service"
    
    # Install sysusers configuration
    install -Dm644 "$srcdir/pacman-sync-utility.sysusers" "$pkgdir/usr/lib/sysusers.d/pacman-sync-utility.conf"
    
    # Install tmpfiles configuration
    install -Dm644 "$srcdir/pacman-sync-utility.tmpfiles" "$pkgdir/usr/lib/tmpfiles.d/pacman-sync-utility.conf"
}

# Main package - includes both client and server
package_pacman-sync-utility() {
    pkgdesc="Centralized package synchronization utility for Arch Linux (complete package)"
    depends=('python>=3.8' 'python-aiohttp' 'python-fastapi' 'python-uvicorn' 'python-pyqt6' 
             'python-asyncpg' 'python-pydantic' 'python-jwt' 'python-bcrypt' 'python-click'
             'python-psutil' 'python-requests' 'qt6-base')
    optdepends=('postgresql: for production database backend'
                'waybar: for status bar integration'
                'python-psycopg2: for PostgreSQL support'
                'systemd: for service management')
    backup=('etc/pacman-sync-utility/client.conf'
            'etc/pacman-sync-utility/server.conf')
    install=pacman-sync-utility.install
    
    _install_common_files
    _install_client_files
    _install_server_files
}

# Client-only package
package_pacman-sync-utility-client() {
    pkgdesc="Pacman Sync Utility - Client component only"
    depends=('python>=3.8' 'python-aiohttp' 'python-pyqt6' 'python-requests' 
             'python-click' 'python-psutil' 'qt6-base')
    optdepends=('waybar: for status bar integration'
                'systemd: for user service management')
    conflicts=('pacman-sync-utility')
    backup=('etc/pacman-sync-utility/client.conf')
    
    _install_common_files
    _install_client_files
}

# Server-only package
package_pacman-sync-utility-server() {
    pkgdesc="Pacman Sync Utility - Server component only"
    depends=('python>=3.8' 'python-fastapi' 'python-uvicorn' 'python-asyncpg' 
             'python-pydantic' 'python-jwt' 'python-bcrypt' 'python-click' 'python-psutil')
    optdepends=('postgresql: for production database backend'
                'python-psycopg2: for PostgreSQL support'
                'systemd: for service management')
    conflicts=('pacman-sync-utility')
    backup=('etc/pacman-sync-utility/server.conf')
    install=pacman-sync-utility.install
    
    _install_common_files
    _install_server_files
}